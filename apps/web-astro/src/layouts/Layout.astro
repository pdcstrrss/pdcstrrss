---
import '@pdcstrrss/ui/src/styles/styles.global';
import { ViewTransitions } from 'astro:transitions';
import { clsx } from 'clsx';
import defaultsDeep from 'lodash/defaultsDeep';
import { AppHeader, SvgSprite, AppFooter, TRANSLATIONS } from '@pdcstrrss/ui';
import { getUserFromRequest } from '@/lib/useUser';
import { AudioPlayer } from '@pdcstrrss/ui';
import SignIn from '@/components/auth/SignIn.astro';

interface Props {
  title?: string;
  hero?: boolean;
  header?: boolean;
  footer?: boolean;
}

const defaultBaseLayoutProps: Partial<Props> = {
  title: 'PDCSTRRSS',
  hero: false,
  header: true,
  footer: true,
};

const currentPath = new URL(Astro.request.url).pathname;
const { header, footer, hero, title } = defaultsDeep({}, Astro.props, defaultBaseLayoutProps);
const user = await getUserFromRequest(Astro);

if (user && Astro.cookies.has('pdcstrrss.redirect')) {
  Astro.cookies.delete('pdcstrrss.redirect');
}
---

<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="preconnect" href="https://fonts.pdcstrrss.app" crossorigin />
    <ViewTransitions />
    <slot name="head" />
  </head>

  <body class={clsx({ 'body-with-hero': !!hero, 'body-with-audio': user?.activeEpisode })}>
    <SvgSprite />
    <div>
      {
        header && (
          <AppHeader client:idle user={user} inverted={hero} currentPath={currentPath}>
            <SignIn
              slot="loginButton"
              provider="github"
              class="app-header-nav-link button-reset"
              type="button"
              options={{ callbackUrl: '/app/episodes', redirect: true }}
            >
              {TRANSLATIONS.login}
            </SignIn>
          </AppHeader>
        )
      }
      <main transition:name="main">
        <slot />
      </main>
    </div>
    {footer && <AppFooter />}
    {
      user?.activeEpisode && (
        <div class="audio-player" transition:persist>
          <AudioPlayer src={user.activeEpisode.url} />
        </div>
      )
    }
  </body>
  <script src="../assets/main.ts"></script>
</html>
