// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Feed {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  url         String         @unique @db.VarChar(length: 255)
  link        String?
  title       String         @db.VarChar(length: 4096)
  description String?        @db.Text
  generator   String?
  language    String?
  episodes    Episode[]
  users       FeedsOfUsers[]
}

model Episode {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(length: 4096)
  url         String   @unique @db.VarChar(length: 255)
  description String?  @db.Text
  published   DateTime
  image       String?  @db.VarChar(length: 4096)
  feed        Feed     @relation(fields: [feedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  feedId      String

  users EpisodesOfUsers[]

  @@index([feedId, published])
}

// https://github.com/prisma/prisma/issues/10758#issuecomment-1098430578

model FeedsOfUsers {
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  feed   Feed   @relation(fields: [feedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  feedId String

  @@id([userId, feedId])
  @@index([userId, feedId])
  @@index([feedId])
}

enum EpisodeStatus {
  NEW
  READ
  PLAYING
  PAUSED
  FINISHED
  SKIPPED
}

model EpisodesOfUsers {
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  episode   Episode @relation(fields: [episodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  episodeId String

  currentTime Float         @default(0)
  status      EpisodeStatus @default(NEW)

  @@id([userId, episodeId])
  @@index([userId, episodeId])
  @@index([episodeId])
}

//
// Auth
// https://authjs.dev/reference/adapter/prisma
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String?   @unique
  expires      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  githubId      String            @unique
  accounts      Account[]
  sessions      Session[]
  feeds         FeedsOfUsers[]
  episodes      EpisodesOfUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
